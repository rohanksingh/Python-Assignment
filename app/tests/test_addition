import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))


import pytest
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_addition_success():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101", "payload": [[1, 2], [3, 4]]}
    )
    assert response.status_code == 200
    assert response.json()["batchid"] == "id0101"
    assert response.json()["response"] == [3, 7]
    assert response.json()["status"] == "complete"

def test_addition_empty_payload():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101", "payload": []}
    )
    assert response.status_code == 200
    assert response.json()["response"] == []

def test_addition_invalid_payload():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101", "payload": [[1, "a"], [3, 4]]}
    )
    assert response.status_code == 422  # Unprocessable Entity

def test_addition_invalid_json():
    response = client.post(
        "/additions/",
        data="{'batchid': 'id0101', 'payload': [[1, 2], [3, 4]]}"  # Invalid JSON
    )
    assert response.status_code == 422  # Unprocessable Entity

def test_addition_missing_batchid():
    response = client.post(
        "/additions/",
        json={"payload": [[1, 2], [3, 4]]}
    )
    assert response.status_code == 422  # Unprocessable Entity

def test_addition_missing_payload():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101"}
    )
    assert response.status_code == 422  # Unprocessable Entity

def test_addition_non_list_payload():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101", "payload": "not a list"}
    )
    assert response.status_code == 422  # Unprocessable Entity
    import pytest
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_addition_success():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101", "payload": [[1, 2], [3, 4]]}
    )
    assert response.status_code == 200
    assert response.json()["batchid"] == "id0101"
    assert response.json()["response"] == [3, 7]
    assert response.json()["status"] == "complete"

def test_addition_empty_payload():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101", "payload": []}
    )
    assert response.status_code == 200
    assert response.json()["response"] == []

def test_addition_invalid_payload():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101", "payload": [[1, "a"], [3, 4]]}
    )
    assert response.status_code == 422  # Unprocessable Entity

def test_addition_invalid_json():
    response = client.post(
        "/additions/",
        data="{'batchid': 'id0101', 'payload': [[1, 2], [3, 4]]}"  # Invalid JSON
    )
    assert response.status_code == 422  # Unprocessable Entity

def test_addition_missing_batchid():
    response = client.post(
        "/additions/",
        json={"payload": [[1, 2], [3, 4]]}
    )
    assert response.status_code == 422  # Unprocessable Entity

def test_addition_missing_payload():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101"}
    )
    assert response.status_code == 422  # Unprocessable Entity

def test_addition_non_list_payload():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101", "payload": "not a list"}
    )
    assert response.status_code == 422  # Unprocessable Entity

def test_addition_special_characters_in_payload():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101", "payload": [["&&^^%%%", 2], [3, 4]]}
    )
    assert response.status_code == 422  # Unprocessable Entity

def test_addition_non_integer_values():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101", "payload": [[1.1, 2], [3, 4]]}
    )
    assert response.status_code == 422  # Unprocessable Entity

def test_addition_special_characters_in_payload():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101", "payload": [["&&^^%%%", 2], [3, 4]]}
    )
    assert response.status_code == 422  # Unprocessable Entity

def test_addition_non_integer_values():
    response = client.post(
        "/additions/",
        json={"batchid": "id0101", "payload": [[1.1, 2], [3, 4]]}
    )
    assert response.status_code == 422  # Unprocessable Entity
